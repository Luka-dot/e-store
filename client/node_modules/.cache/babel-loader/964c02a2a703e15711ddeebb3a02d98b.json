{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Luk'sC15\\\\coding\\\\react\\\\my-store\\\\e-store\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Luk'sC15\\\\coding\\\\react\\\\my-store\\\\e-store\\\\client\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import ShopActionTypes from'./shop.types';import{firestore,convertCollectionSnapshotToMap}from'../../firebase/firebase.utils';export var fetchCollectionsStart=function fetchCollectionsStart(){return{type:ShopActionTypes.FETCH_COLLECTIONS_START};};export var fetchCollectionsSuccess=function fetchCollectionsSuccess(collectionsMap){return{type:ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,payload:collectionsMap};};export var fetchCollectionsFailure=function fetchCollectionsFailure(errorMessage){return{type:ShopActionTypes.FETCH_COLLECTIONS_FAILURE,payload:errorMessage};};export var fetchCollectionsStartAsync=function fetchCollectionsStartAsync(){return function(dispatch){var collectionRef=firestore.collection('collections');dispatch(fetchCollectionsStart());collectionRef.get().then(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(snapshot){var collectionsMap;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:collectionsMap=convertCollectionSnapshotToMap(snapshot);dispatch(fetchCollectionsSuccess(collectionsMap));case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()).catch(function(error){return dispatch(fetchCollectionsFailure(error.message));});};};","map":{"version":3,"sources":["C:/Users/Luk'sC15/coding/react/my-store/e-store/client/src/redux/shop/shop.actions.js"],"names":["ShopActionTypes","firestore","convertCollectionSnapshotToMap","fetchCollectionsStart","type","FETCH_COLLECTIONS_START","fetchCollectionsSuccess","collectionsMap","FETCH_COLLECTIONS_SUCCESS","payload","fetchCollectionsFailure","errorMessage","FETCH_COLLECTIONS_FAILURE","fetchCollectionsStartAsync","dispatch","collectionRef","collection","get","then","snapshot","catch","error","message"],"mappings":"+WAAA,MAAOA,CAAAA,eAAP,KAA4B,cAA5B,CAEA,OAASC,SAAT,CAAoBC,8BAApB,KAA0D,+BAA1D,CAEA,MAAO,IAAMC,CAAAA,qBAAqB,CAAG,QAAxBA,CAAAA,qBAAwB,SAAO,CACxCC,IAAI,CAAEJ,eAAe,CAACK,uBADkB,CAAP,EAA9B,CAIP,MAAO,IAAMC,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,cAAc,QAAK,CACtDH,IAAI,CAAEJ,eAAe,CAACQ,yBADgC,CAEtDC,OAAO,CAAEF,cAF6C,CAAL,EAA9C,CAKP,MAAO,IAAMG,CAAAA,uBAAuB,CAAG,QAA1BA,CAAAA,uBAA0B,CAAAC,YAAY,QAAK,CACpDP,IAAI,CAACJ,eAAe,CAACY,yBAD+B,CAEpDH,OAAO,CAAEE,YAF2C,CAAL,EAA5C,CAKP,MAAO,IAAME,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,EAAM,CAC5C,MAAO,UAAAC,QAAQ,CAAI,CACf,GAAMC,CAAAA,aAAa,CAAGd,SAAS,CAACe,UAAV,CAAqB,aAArB,CAAtB,CACAF,QAAQ,CAACX,qBAAqB,EAAtB,CAAR,CAEAY,aAAa,CAACE,GAAd,GAAoBC,IAApB,0FAA0B,iBAAMC,QAAN,qIAChBZ,cADgB,CACCL,8BAA8B,CAACiB,QAAD,CAD/B,CAE1BL,QAAQ,CAACR,uBAAuB,CAACC,cAAD,CAAxB,CAAR,CAF0B,sDAA1B,gEAIEa,KAJF,CAIQ,SAAAC,KAAK,QAAIP,CAAAA,QAAQ,CAACJ,uBAAuB,CAACW,KAAK,CAACC,OAAP,CAAxB,CAAZ,EAJb,EAKH,CATD,CAUH,CAXM","sourcesContent":["import ShopActionTypes from './shop.types';\r\n\r\nimport { firestore, convertCollectionSnapshotToMap } from '../../firebase/firebase.utils';\r\n\r\nexport const fetchCollectionsStart = () => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_START\r\n});\r\n\r\nexport const fetchCollectionsSuccess = collectionsMap => ({\r\n    type: ShopActionTypes.FETCH_COLLECTIONS_SUCCESS,\r\n    payload: collectionsMap\r\n});\r\n\r\nexport const fetchCollectionsFailure = errorMessage => ({\r\n    type:ShopActionTypes.FETCH_COLLECTIONS_FAILURE,\r\n    payload: errorMessage\r\n});\r\n\r\nexport const fetchCollectionsStartAsync = () => {\r\n    return dispatch => {\r\n        const collectionRef = firestore.collection('collections');\r\n        dispatch(fetchCollectionsStart());\r\n\r\n        collectionRef.get().then((async snapshot => {\r\n            const collectionsMap = convertCollectionSnapshotToMap(snapshot);\r\n        dispatch(fetchCollectionsSuccess(collectionsMap))\r\n        })\r\n        ).catch(error => dispatch(fetchCollectionsFailure(error.message)))\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}